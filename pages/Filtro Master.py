# pages/2_Filtro_Simulacoes.py
import streamlit as st
import pandas as pd

# Importa as fun√ß√µes necess√°rias dos nossos m√≥dulos
from data_handler import carregar_arquivos_simulacoes, converter_df_para_csv
from ui_components import exibir_sidebar_simulacoes
from filters import aplicar_filtro_simulacoes

# --- 1. Configura√ß√£o da P√°gina ---
st.set_page_config(page_title="Processador de Simula√ß√µes", layout="wide")
st.title("‚öôÔ∏è Processador de Arquivos com Simula√ß√µes")
st.info(
    "Esta p√°gina √© projetada para processar arquivos que cont√™m uma coluna 'Simulacoes', "
    "extraindo a melhor oferta de saque benef√≠cio para cada cliente."
)

# --- 2. Interface do Usu√°rio ---
params = exibir_sidebar_simulacoes()

st.header("üìÇ Upload de Arquivos")
uploaded_files = st.file_uploader(
    "Selecione os arquivos de simula√ß√£o para processar",
    type="csv",
    accept_multiple_files=True,
    key="uploader_simulacoes"
)

# --- 3. L√≥gica Principal ---
if uploaded_files:
    # Carrega os dados usando a fun√ß√£o espec√≠fica para este tipo de arquivo
    base_bruta = carregar_arquivos_simulacoes(uploaded_files)

    if not base_bruta.empty:
        st.write("Amostra dos dados carregados:")
        st.dataframe(base_bruta.head())

        if st.button("üöÄ Processar Arquivos e Gerar Campanha", type="primary", use_container_width=True):
            with st.spinner("Extraindo e processando simula√ß√µes..."):
                # Aplica o filtro espec√≠fico para simula√ß√µes
                base_final = aplicar_filtro_simulacoes(base_bruta, params)

                if not base_final.empty:
                    st.success("Arquivos processados com sucesso!")
                    st.subheader("üìä Resultado Final")
                    st.dataframe(base_final)
                    st.metric("Total de registros na campanha final", f"{len(base_final)}")

                    # Download do resultado
                    csv = converter_df_para_csv(base_final)
                    nome_convenio = base_final["Convenio"].iloc[0] if pd.notna(base_final["Convenio"].iloc[0]) else "GERAL"
                    data_hoje = datetime.today().strftime('%d%m%Y')
                    
                    st.download_button(
                        label="üì• Baixar Resultado Final em CSV",
                        data=csv,
                        file_name=f'{nome_convenio}_BENEFICIO_SIMULACAO_{params["equipe"].upper()}_{data_hoje}.csv',
                        mime='text/csv',
                        use_container_width=True
                    )
                else:
                    st.warning("O processamento n√£o resultou em dados v√°lidos. Verifique o conte√∫do dos arquivos e os filtros.")
    else:
        st.error("N√£o foi poss√≠vel carregar os dados dos arquivos. Verifique se n√£o est√£o corrompidos.")
else:
    st.info("Aguardando o upload de arquivos para iniciar o processamento.")